/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var datapb_data_pb = require('../datapb/data_pb.js');
goog.exportSymbol('proto.puppet.fsm.Action', null, global);
goog.exportSymbol('proto.puppet.fsm.ActionInvocation', null, global);
goog.exportSymbol('proto.puppet.fsm.ActionsRequest', null, global);
goog.exportSymbol('proto.puppet.fsm.ActionsResponse', null, global);
goog.exportSymbol('proto.puppet.fsm.Parameter', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.puppet.fsm.ActionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.puppet.fsm.ActionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.puppet.fsm.ActionsRequest.displayName = 'proto.puppet.fsm.ActionsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.puppet.fsm.ActionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.puppet.fsm.ActionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.puppet.fsm.ActionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.fsm.ActionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.puppet.fsm.ActionsRequest}
 */
proto.puppet.fsm.ActionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.puppet.fsm.ActionsRequest;
  return proto.puppet.fsm.ActionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.puppet.fsm.ActionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.puppet.fsm.ActionsRequest}
 */
proto.puppet.fsm.ActionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.puppet.fsm.ActionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.puppet.fsm.ActionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.puppet.fsm.ActionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.fsm.ActionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.puppet.fsm.ActionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.puppet.fsm.ActionsResponse.repeatedFields_, null);
};
goog.inherits(proto.puppet.fsm.ActionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.puppet.fsm.ActionsResponse.displayName = 'proto.puppet.fsm.ActionsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.puppet.fsm.ActionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.puppet.fsm.ActionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.puppet.fsm.ActionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.puppet.fsm.ActionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.fsm.ActionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.puppet.fsm.Action.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.puppet.fsm.ActionsResponse}
 */
proto.puppet.fsm.ActionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.puppet.fsm.ActionsResponse;
  return proto.puppet.fsm.ActionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.puppet.fsm.ActionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.puppet.fsm.ActionsResponse}
 */
proto.puppet.fsm.ActionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.puppet.fsm.Action;
      reader.readMessage(value,proto.puppet.fsm.Action.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.puppet.fsm.ActionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.puppet.fsm.ActionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.puppet.fsm.ActionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.fsm.ActionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.puppet.fsm.Action.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Action actions = 1;
 * @return {!Array.<!proto.puppet.fsm.Action>}
 */
proto.puppet.fsm.ActionsResponse.prototype.getActionsList = function() {
  return /** @type{!Array.<!proto.puppet.fsm.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.puppet.fsm.Action, 1));
};


/** @param {!Array.<!proto.puppet.fsm.Action>} value */
proto.puppet.fsm.ActionsResponse.prototype.setActionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.puppet.fsm.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.puppet.fsm.Action}
 */
proto.puppet.fsm.ActionsResponse.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.puppet.fsm.Action, opt_index);
};


proto.puppet.fsm.ActionsResponse.prototype.clearActionsList = function() {
  this.setActionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.puppet.fsm.ActionInvocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.puppet.fsm.ActionInvocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.puppet.fsm.ActionInvocation.displayName = 'proto.puppet.fsm.ActionInvocation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.puppet.fsm.ActionInvocation.prototype.toObject = function(opt_includeInstance) {
  return proto.puppet.fsm.ActionInvocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.puppet.fsm.ActionInvocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.fsm.ActionInvocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    arguments: (f = msg.getArguments()) && datapb_data_pb.DataHash.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.puppet.fsm.ActionInvocation}
 */
proto.puppet.fsm.ActionInvocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.puppet.fsm.ActionInvocation;
  return proto.puppet.fsm.ActionInvocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.puppet.fsm.ActionInvocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.puppet.fsm.ActionInvocation}
 */
proto.puppet.fsm.ActionInvocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = new datapb_data_pb.DataHash;
      reader.readMessage(value,datapb_data_pb.DataHash.deserializeBinaryFromReader);
      msg.setArguments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.puppet.fsm.ActionInvocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.puppet.fsm.ActionInvocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.puppet.fsm.ActionInvocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.fsm.ActionInvocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getArguments();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      datapb_data_pb.DataHash.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.puppet.fsm.ActionInvocation.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.puppet.fsm.ActionInvocation.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional puppet.datapb.DataHash arguments = 2;
 * @return {?proto.puppet.datapb.DataHash}
 */
proto.puppet.fsm.ActionInvocation.prototype.getArguments = function() {
  return /** @type{?proto.puppet.datapb.DataHash} */ (
    jspb.Message.getWrapperField(this, datapb_data_pb.DataHash, 2));
};


/** @param {?proto.puppet.datapb.DataHash|undefined} value */
proto.puppet.fsm.ActionInvocation.prototype.setArguments = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.puppet.fsm.ActionInvocation.prototype.clearArguments = function() {
  this.setArguments(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.puppet.fsm.ActionInvocation.prototype.hasArguments = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.puppet.fsm.Parameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.puppet.fsm.Parameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.puppet.fsm.Parameter.displayName = 'proto.puppet.fsm.Parameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.puppet.fsm.Parameter.prototype.toObject = function(opt_includeInstance) {
  return proto.puppet.fsm.Parameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.puppet.fsm.Parameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.fsm.Parameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.puppet.fsm.Parameter}
 */
proto.puppet.fsm.Parameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.puppet.fsm.Parameter;
  return proto.puppet.fsm.Parameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.puppet.fsm.Parameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.puppet.fsm.Parameter}
 */
proto.puppet.fsm.Parameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.puppet.fsm.Parameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.puppet.fsm.Parameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.puppet.fsm.Parameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.fsm.Parameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.puppet.fsm.Parameter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.puppet.fsm.Parameter.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.puppet.fsm.Parameter.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.puppet.fsm.Parameter.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.puppet.fsm.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.puppet.fsm.Action.repeatedFields_, null);
};
goog.inherits(proto.puppet.fsm.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.puppet.fsm.Action.displayName = 'proto.puppet.fsm.Action';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.puppet.fsm.Action.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.puppet.fsm.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.puppet.fsm.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.puppet.fsm.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.fsm.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    consumesList: jspb.Message.toObjectList(msg.getConsumesList(),
    proto.puppet.fsm.Parameter.toObject, includeInstance),
    producesList: jspb.Message.toObjectList(msg.getProducesList(),
    proto.puppet.fsm.Parameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.puppet.fsm.Action}
 */
proto.puppet.fsm.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.puppet.fsm.Action;
  return proto.puppet.fsm.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.puppet.fsm.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.puppet.fsm.Action}
 */
proto.puppet.fsm.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.puppet.fsm.Parameter;
      reader.readMessage(value,proto.puppet.fsm.Parameter.deserializeBinaryFromReader);
      msg.addConsumes(value);
      break;
    case 4:
      var value = new proto.puppet.fsm.Parameter;
      reader.readMessage(value,proto.puppet.fsm.Parameter.deserializeBinaryFromReader);
      msg.addProduces(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.puppet.fsm.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.puppet.fsm.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.puppet.fsm.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.puppet.fsm.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConsumesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.puppet.fsm.Parameter.serializeBinaryToWriter
    );
  }
  f = message.getProducesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.puppet.fsm.Parameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.puppet.fsm.Action.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.puppet.fsm.Action.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.puppet.fsm.Action.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.puppet.fsm.Action.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated Parameter consumes = 3;
 * @return {!Array.<!proto.puppet.fsm.Parameter>}
 */
proto.puppet.fsm.Action.prototype.getConsumesList = function() {
  return /** @type{!Array.<!proto.puppet.fsm.Parameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.puppet.fsm.Parameter, 3));
};


/** @param {!Array.<!proto.puppet.fsm.Parameter>} value */
proto.puppet.fsm.Action.prototype.setConsumesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.puppet.fsm.Parameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.puppet.fsm.Parameter}
 */
proto.puppet.fsm.Action.prototype.addConsumes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.puppet.fsm.Parameter, opt_index);
};


proto.puppet.fsm.Action.prototype.clearConsumesList = function() {
  this.setConsumesList([]);
};


/**
 * repeated Parameter produces = 4;
 * @return {!Array.<!proto.puppet.fsm.Parameter>}
 */
proto.puppet.fsm.Action.prototype.getProducesList = function() {
  return /** @type{!Array.<!proto.puppet.fsm.Parameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.puppet.fsm.Parameter, 4));
};


/** @param {!Array.<!proto.puppet.fsm.Parameter>} value */
proto.puppet.fsm.Action.prototype.setProducesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.puppet.fsm.Parameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.puppet.fsm.Parameter}
 */
proto.puppet.fsm.Action.prototype.addProduces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.puppet.fsm.Parameter, opt_index);
};


proto.puppet.fsm.Action.prototype.clearProducesList = function() {
  this.setProducesList([]);
};


goog.object.extend(exports, proto.puppet.fsm);
